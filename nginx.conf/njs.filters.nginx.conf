user postgres;

worker_processes 1;
pid /var/run/nginx.pid;

events {
    worker_connections 768;
}

http {
    default_type application/octet-stream;

####NginScript filter, part 1/2
    js_include SourceJavaScript.js;
    js_set $filter_by_njs_good GoodFilter;
    js_set $filter_by_njs_bad BadFilter;

    server {
        listen       8880;
        server_name  127.0.0.1;

        pgcopy_server db_pub "host=127.0.0.1 dbname=testdb user=testuser password=123";


####NginScript filter, part 2/2
#/njs/table_name/col1,col2,col3?col5=...
        location ~/njs/(?<table>[a-z0-9_]*)/(?<columns>\*|[a-zA-Z0-9,_]+) {
            add_header Content-Type "text/plain; charset=UTF-8";

            ####Best practice for debug filter:  
            #return 200 $filter_by_njs_good;
            pgcopy_query GET db_pub 
                "COPY (select $columns FROM $table $filter_by_njs_good) TO STDOUT WITH DELIMITER ';';";
        }

#Demo for injection
#http://127.0.0.1:8880/njs_bad/simple_data/*?s_id=2';drop table simple_data;select * from simple_data where s_id='1
        location ~/njs_bad/(?<table>[a-z0-9_]*)/(?<columns>\*|[a-zA-Z0-9,_]+) {
            add_header Content-Type "text/plain; charset=UTF-8";

            ####Best practice for debug filter:
            #return 200 $filter_by_njs_bad;
            pgcopy_query GET db_pub 
                "COPY (select $columns FROM $table $filter_by_njs_bad) TO STDOUT WITH DELIMITER ';';";
        }
    }
}
